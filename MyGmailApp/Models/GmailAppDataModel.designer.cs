#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MyGmailApp.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GmailDatabase")]
	public partial class GmailAppDataModelDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUserRole(UserRole instance);
    partial void UpdateUserRole(UserRole instance);
    partial void DeleteUserRole(UserRole instance);
    partial void InsertLogin(Login instance);
    partial void UpdateLogin(Login instance);
    partial void DeleteLogin(Login instance);
    partial void InsertGmailConfig(GmailConfig instance);
    partial void UpdateGmailConfig(GmailConfig instance);
    partial void DeleteGmailConfig(GmailConfig instance);
    #endregion
		
		public GmailAppDataModelDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GmailDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GmailAppDataModelDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GmailAppDataModelDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GmailAppDataModelDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GmailAppDataModelDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<UserRole> UserRoles
		{
			get
			{
				return this.GetTable<UserRole>();
			}
		}
		
		public System.Data.Linq.Table<Login> Logins
		{
			get
			{
				return this.GetTable<Login>();
			}
		}
		
		public System.Data.Linq.Table<GmailConfig> GmailConfigs
		{
			get
			{
				return this.GetTable<GmailConfig>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserRoles")]
	public partial class UserRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _UserRole1;
		
		private string _RoleDescription;
		
		private EntitySet<Login> _Logins;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserRole1Changing(string value);
    partial void OnUserRole1Changed();
    partial void OnRoleDescriptionChanging(string value);
    partial void OnRoleDescriptionChanged();
    #endregion
		
		public UserRole()
		{
			this._Logins = new EntitySet<Login>(new Action<Login>(this.attach_Logins), new Action<Login>(this.detach_Logins));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL")]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="UserRole", Storage="_UserRole1", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserRole1
		{
			get
			{
				return this._UserRole1;
			}
			set
			{
				if ((this._UserRole1 != value))
				{
					this.OnUserRole1Changing(value);
					this.SendPropertyChanging();
					this._UserRole1 = value;
					this.SendPropertyChanged("UserRole1");
					this.OnUserRole1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleDescription", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string RoleDescription
		{
			get
			{
				return this._RoleDescription;
			}
			set
			{
				if ((this._RoleDescription != value))
				{
					this.OnRoleDescriptionChanging(value);
					this.SendPropertyChanging();
					this._RoleDescription = value;
					this.SendPropertyChanged("RoleDescription");
					this.OnRoleDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_Login", Storage="_Logins", ThisKey="UserRole1", OtherKey="UserRole")]
		public EntitySet<Login> Logins
		{
			get
			{
				return this._Logins;
			}
			set
			{
				this._Logins.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.UserRole1 = this;
		}
		
		private void detach_Logins(Login entity)
		{
			this.SendPropertyChanging();
			entity.UserRole1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logins")]
	public partial class Login : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FullName;
		
		private string _Username;
		
		private string _Password;
		
		private string _UserRole;
		
		private string _Active;
		
		private EntitySet<GmailConfig> _GmailConfigs;
		
		private EntityRef<UserRole> _UserRole1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnUserRoleChanging(string value);
    partial void OnUserRoleChanged();
    partial void OnActiveChanging(string value);
    partial void OnActiveChanged();
    #endregion
		
		public Login()
		{
			this._GmailConfigs = new EntitySet<GmailConfig>(new Action<GmailConfig>(this.attach_GmailConfigs), new Action<GmailConfig>(this.detach_GmailConfigs));
			this._UserRole1 = default(EntityRef<UserRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FullName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}

        public string ConfirmPassword { get; set; }
        public string NewPassword { get; set; }

        public string NewConfirmPassword { get; set; }

		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRole", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string UserRole
		{
			get
			{
				return this._UserRole;
			}
			set
			{
				if ((this._UserRole != value))
				{
					if (this._UserRole1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRoleChanging(value);
					this.SendPropertyChanging();
					this._UserRole = value;
					this.SendPropertyChanged("UserRole");
					this.OnUserRoleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Active", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_GmailConfig", Storage="_GmailConfigs", ThisKey="Username", OtherKey="Username")]
		public EntitySet<GmailConfig> GmailConfigs
		{
			get
			{
				return this._GmailConfigs;
			}
			set
			{
				this._GmailConfigs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserRole_Login", Storage="_UserRole1", ThisKey="UserRole", OtherKey="UserRole1", IsForeignKey=true)]
		public UserRole UserRole1
		{
			get
			{
				return this._UserRole1.Entity;
			}
			set
			{
				UserRole previousValue = this._UserRole1.Entity;
				if (((previousValue != value) 
							|| (this._UserRole1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserRole1.Entity = null;
						previousValue.Logins.Remove(this);
					}
					this._UserRole1.Entity = value;
					if ((value != null))
					{
						value.Logins.Add(this);
						this._UserRole = value.UserRole1;
					}
					else
					{
						this._UserRole = default(string);
					}
					this.SendPropertyChanged("UserRole1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GmailConfigs(GmailConfig entity)
		{
			this.SendPropertyChanging();
			entity.Login = this;
		}
		
		private void detach_GmailConfigs(GmailConfig entity)
		{
			this.SendPropertyChanging();
			entity.Login = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GmailConfig")]
	public partial class GmailConfig : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _GmailUsername;
		
		private string _GmailPassword;
		
		private string _IncomingServerAddress;
		
		private string _OutgoingServerAddress;
		
		private int _IncomingServerPort;
		
		private int _OutgoingServerPort;
		
		private bool _UseSSL;
		
		private EntityRef<Login> _Login;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnGmailUsernameChanging(string value);
    partial void OnGmailUsernameChanged();
    partial void OnGmailPasswordChanging(string value);
    partial void OnGmailPasswordChanged();
    partial void OnIncomingServerAddressChanging(string value);
    partial void OnIncomingServerAddressChanged();
    partial void OnOutgoingServerAddressChanging(string value);
    partial void OnOutgoingServerAddressChanged();
    partial void OnIncomingServerPortChanging(int value);
    partial void OnIncomingServerPortChanged();
    partial void OnOutgoingServerPortChanging(int value);
    partial void OnOutgoingServerPortChanged();
    partial void OnUseSSLChanging(bool value);
    partial void OnUseSSLChanged();
    #endregion
		
		public GmailConfig()
		{
			this._Login = default(EntityRef<Login>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(100)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					if (this._Login.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GmailUsername", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GmailUsername
		{
			get
			{
				return this._GmailUsername;
			}
			set
			{
				if ((this._GmailUsername != value))
				{
					this.OnGmailUsernameChanging(value);
					this.SendPropertyChanging();
					this._GmailUsername = value;
					this.SendPropertyChanged("GmailUsername");
					this.OnGmailUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GmailPassword", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string GmailPassword
		{
			get
			{
				return this._GmailPassword;
			}
			set
			{
				if ((this._GmailPassword != value))
				{
					this.OnGmailPasswordChanging(value);
					this.SendPropertyChanging();
					this._GmailPassword = value;
					this.SendPropertyChanged("GmailPassword");
					this.OnGmailPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingServerAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string IncomingServerAddress
		{
			get
			{
				return this._IncomingServerAddress;
			}
			set
			{
				if ((this._IncomingServerAddress != value))
				{
					this.OnIncomingServerAddressChanging(value);
					this.SendPropertyChanging();
					this._IncomingServerAddress = value;
					this.SendPropertyChanged("IncomingServerAddress");
					this.OnIncomingServerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingServerAddress", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string OutgoingServerAddress
		{
			get
			{
				return this._OutgoingServerAddress;
			}
			set
			{
				if ((this._OutgoingServerAddress != value))
				{
					this.OnOutgoingServerAddressChanging(value);
					this.SendPropertyChanging();
					this._OutgoingServerAddress = value;
					this.SendPropertyChanged("OutgoingServerAddress");
					this.OnOutgoingServerAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IncomingServerPort", DbType="Int NOT NULL")]
		public int IncomingServerPort
		{
			get
			{
				return this._IncomingServerPort;
			}
			set
			{
				if ((this._IncomingServerPort != value))
				{
					this.OnIncomingServerPortChanging(value);
					this.SendPropertyChanging();
					this._IncomingServerPort = value;
					this.SendPropertyChanged("IncomingServerPort");
					this.OnIncomingServerPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OutgoingServerPort", DbType="Int NOT NULL")]
		public int OutgoingServerPort
		{
			get
			{
				return this._OutgoingServerPort;
			}
			set
			{
				if ((this._OutgoingServerPort != value))
				{
					this.OnOutgoingServerPortChanging(value);
					this.SendPropertyChanging();
					this._OutgoingServerPort = value;
					this.SendPropertyChanged("OutgoingServerPort");
					this.OnOutgoingServerPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UseSSL", DbType="Bit NOT NULL")]
		public bool UseSSL
		{
			get
			{
				return this._UseSSL;
			}
			set
			{
				if ((this._UseSSL != value))
				{
					this.OnUseSSLChanging(value);
					this.SendPropertyChanging();
					this._UseSSL = value;
					this.SendPropertyChanged("UseSSL");
					this.OnUseSSLChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Login_GmailConfig", Storage="_Login", ThisKey="Username", OtherKey="Username", IsForeignKey=true)]
		public Login Login
		{
			get
			{
				return this._Login.Entity;
			}
			set
			{
				Login previousValue = this._Login.Entity;
				if (((previousValue != value) 
							|| (this._Login.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Login.Entity = null;
						previousValue.GmailConfigs.Remove(this);
					}
					this._Login.Entity = value;
					if ((value != null))
					{
						value.GmailConfigs.Add(this);
						this._Username = value.Username;
					}
					else
					{
						this._Username = default(string);
					}
					this.SendPropertyChanged("Login");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
